---
title: "Lab 9: Rhapsody in `R`"
subtitle: Due Wednesday April 23 at 3:00 PM
---

```{r}
#| echo: false
html_tag_audio <- function(file, type = c("wav")) {
  type <- match.arg(type)
  htmltools::tags$audio(
    controls = "",
    htmltools::tags$source(
      src = file,
      type = glue::glue("audio/{type}", type = type)
    )
  )
}
```

There are countless applications of probability and statistics to the natural and social sciences, and we have explored several of them: [disease testing](https://sta240-s25.github.io/labs/lab-2.html), [ChatGPT](https://sta240-s25.github.io/labs/lab-3.html), [insurance modeling](https://sta240-s25.github.io/labs/lab-4.html#part-2-modeling-insurance-claims), [portfolio selection](https://sta240-s25.github.io/labs/lab-7.html), etc. Less frequently explored are the applications of probability in the arts. So, for our last lab, let's have some silly fun and use what we've learned about computer simulation to write our own pieces of **stochastic music**. 

# Background

In the twentieth century, avant-garde composers experimented with new techniques for composing music -- techniques that would make Mozart and Beethoven cringe. One of these composers was named [Iannis Xenakis](https://en.wikipedia.org/wiki/Iannis_Xenakis). He would write music by simulating random processes, either in the physical world or on a computer. To put it crudely, whatever the simulation spit out, that's what he'd write on paper and hand to the musicians to play. The *art* of this approach lay in how the simulation was constructed. As we know from results like the central limit theorem, ostensibly random phenomena can nevertheless be quite patternful, and so Xenakis' career was devoted to experimenting with different random structures and exploring their implications for the sound of the resulting music. 

In his work *Pithoprakta* (1956) for example, Xenakis conceived of each player in the 46-piece string orchestra as a gas molecule randomly drifting through space according to the laws of statistical mechanics. He notated this in the following way:

![](pithoprakta.jpg){fig-align="center" width="80%"}

Suffice it to say, this music sounds crazy. As Leonard Bernstein [said](https://youtu.be/LfH74hlhKp0?feature=shared&t=639), "every member of the orchestra is on the honor system." Hear for yourself:

<iframe width="560" height="315" src="https://www.youtube.com/embed/nvH2KYYJg-o?si=FCG2k2XsaY4MKZi-" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>

Do I love the sound of that? Not exactly. But as a statistician, I can respect and appreciate the thought behind it.

**Further reading**: 

- [Stochastic music](https://www.iannis-xenakis.org/en/stochastic-music/) by Benoît Gibson (from the Xenakis official website);
- [Mathematics of Music](https://www.ams.jhu.edu/dan-mathofmusic/stochastic-processes/) by Daniel Naiman (Johns Hopkins).

# The `gm` package

::: callout-warning 
If you have not done so already, please complete the installation instructions [here](https://sta240-s25.github.io/labs/lab-8.html#part-0---tuning-up).
:::

```{r}
#| message: false
#| warning: false
library(gm)
```


In this lab, we will write our own pieces of stochastic music. We will do this using the [`gm` package](https://cran.r-project.org/web/packages/gm/index.html) by [Renfei Mao](https://flujoo.github.io/). "gm" stands for "grammar of music," and this package provides a `ggplot2`-style syntax for representing music in `R`. Musical elements (pitch, meter, articulation, instrumentation, etc) are added in layers just like we would write `ggplot() + geom_X() + theme() + ...`, and the package is integrated with MuseScore to allow us to generate sheet music and MIDI previews of our compositions. 

::: callout-tip
## Read the manual
`gm` has a very thorough users guide that you can refer to:

<https://cran.r-project.org/web/packages/gm/vignettes/gm.html>
:::

For example, this is how I would input the first five bars of Ravel's [Prelude in A Minor](https://youtu.be/KAuu3dWf4e0?feature=shared):

![](prelude.png){fig-align="center" width="80%"}

```{r}
#| eval: true

right_hand <- Line(
  pitches = list(NA, "E5", "F#5", "D5", "E5", "F#5",
                 "B5", "G5", "D5", 
                 "E5", "G4",
                 c("D4", "F#4", "B4"), c("C#4", "F4", "C5"),
                 c("G3", "C4", "E4"), c("D#4", "G4"), c("C4", "E4")),
  durations = c(0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 
                1, 1, 2, 
                1, 1, 
                2, 1, 
                1.5, 0.5, 1)
)
  
left_hand <- Line(
  pitches = c("A2", "E3", "G3", "C4", "E4", 
              "G4", "C5", NA, 
              NA, "E2", "E3", "F#3", "G#3",
              NA, "A2", "E3", "B3", "G3"),
  durations = c(rep(0.5, 7), 2, 
                rep(0.5, 4), 1, 
                rep(0.5, 4), 1),
  bar = 2, offset = 0.5
)

  
  
prelude <- Music() + 
  Meter(3, 4) + 
  Tempo(60, marking = "Assez lent et très expressif (d'un rhythme libre) quarter = 60 environ") + 
  right_hand + 
  Dynamic("p", 1) + 
  Slur(2, 11) + 
  Slur(12, 16) + 
  left_hand + 
  Clef("F") +
  Dynamic("p", 1) + 
  Slur(1, 7) + 
  Slur(10, 13) + 
  Slur(15, 18) + 
  Pedal(1, 7)
  

show(prelude)
```

Pretty close!


# Ludwig van Zito

I adore music of all kinds, but I know absolutely nothing about it. My kid brother is a music ed major in college, and I am frequently harassing him with ridiculous questions about Ice Spice's use of the plagal cadence. I am as dumb as they come. But I do know something about probability, so to give you some inspiration, here is what I came up with after tinkering with this stuff for a couple hours.

## Schrödinger's Kitten on the Keys, Op. 1

This code creates a vector with every pitch on the piano from lowest to highest:

```{r}
pitches <- c("C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B")
octaves <- 1:7
all_pitches <- c("A0", "A#0", "B0", 
                 paste(rep(pitches, length(octaves)), 
                       sort(rep(octaves, length(pitches))), 
                       sep = ""), 
                 "C8")
```

The simplest piece of stochastic music is one where we randomly sample these pitches with replacement.

```{r}
set.seed(8675309)

line1 <- Line(
  pitches = sample(all_pitches, 64, replace = TRUE),
  durations = .25
)

line2 <- Line(
  pitches = sample(all_pitches, 64, replace = TRUE),
  durations = .25
)

kitten <- Music() + 
  Meter(4, 4) + 
  Tempo(120) + 
  line1 + 
  line2 + 
  Instrument(1) + 
  Dynamic("p", 1) +
  Dynamic("ffff", 64) +
  Hairpin("<", 2, 63)

show(kitten)
```

Groovy!

## The Wandom Waltz, Op. 2

Alright, but it doesn't all have to sound like hell, does it? Here's a [waltz](https://youtu.be/WaKdPgkTZ7M?feature=shared) where the accompaniment is deterministic, but the tune on the clarinet is a random walk on the C minor scale. This means that we move up or down the scale one note at a time by flipping a fair coin.

```{r}
#| code-fold: true

# ===============================================
# random walk on the elements of a vector
# ===============================================

random_walk <- function(vec, start_pos, steps) {
  n <- length(vec)

  # Initialize walk
  positions <- numeric(steps + 1)
  positions[1] <- start_pos
  
  for (i in 2:(steps + 1)) {
    current_pos <- positions[i - 1]
    
    # At the left boundary
    if (current_pos == 1) {
      new_pos <- 2
    }
    # At the right boundary
    else if (current_pos == n) {
      new_pos <- n - 1
    }
    # Otherwise move left or right with equal probability
    else {
      direction <- sample(c(-1, 1), size = 1)
      new_pos <- current_pos + direction
    }
    positions[i] <- new_pos
  }
  return(vec[positions])
}

# ===============================================
# what pitches are fair game?
# ===============================================

pitches <- c("C", "D", "E-", "F", "G", "A-", "B-")
octaves <- 4:5
my_notes <- paste(rep(pitches, length(octaves)), 
                  sort(rep(octaves, length(pitches))), sep = "")

# ===============================================
# fixed accompaniment (stolen from Shostakovich)
# ===============================================

c_octave <- c("C2", "C3")
d_octave <- c("D2", "D3")
g_octave <- c("G1", "G2")
c_minor_triad <- c("C3", "E-3", "G3")

chunk_1 <- list(c_octave, c_minor_triad, c_minor_triad)
chunk_2 <- list(g_octave, c_minor_triad, c_minor_triad)
chunk_3 <- list(d_octave, c("F3", "A-3"), c("F3", "A-3"))
chunk_4 <- list(g_octave, c("F3", "A-3"), c("F3", "A-3"))

accompaniment <- Line(c(chunk_1, chunk_2, chunk_1, chunk_2,
                        chunk_1, chunk_2, chunk_1, chunk_2,
                        chunk_1, chunk_2, chunk_3, chunk_4))

bass <- Line(c("C3", NA, NA, "G2", NA, NA, "C3", NA, NA, "G2", NA, NA,
               "C3", NA, NA, "G2", NA, NA, "C3", NA, NA, "G2", NA, NA,
               "C3", NA, NA, "G2", NA, NA, "D3", NA, NA, "G2", NA, NA))

# ===============================================
# simulate tune
# ===============================================

set.seed(8675309)

tune_iid <- Line(pitches = random_walk(my_notes, 1, 47),
                 durations = 0.5,
                 bar = 5)

# ===============================================
# compose!
# ===============================================

waltz <- Music() + 
  Meter(3, 4) + 
  Tempo(170) + 
  Key(-3) + 
  
  tune_iid + 
  Instrument(72) + # 72 - clarinet
  Slur(1, 48) +
  
  accompaniment + 
  Clef("F") +
  Instrument(22) + #22 - accordion
  Dynamic("p", 1) +
  Dynamic("pp", 13) +

  bass + 
  Clef("F") + 
  Instrument(106) + # 106 - banjo
  Dynamic("p", 1) +
  Dynamic("pp", 13) +
  Hairpin(">", 7, 12) + 
  
  bass + 
  Clef("F") + 
  Instrument(71) + # 71 - bassoon
  Dynamic("p", 1) +
  Dynamic("pp", 13) +
  Hairpin(">", 7, 12)

# add staccato mark to second and third beat of each bar of accompaniment

x <- 1:36
off_beats <- x[x %% 3 != 1]

for(i in off_beats){
  waltz <- waltz + Articulation(".", i, to = 2)
}

show(waltz)

```


## Reichleriana, Op. 3

I was trying to create something that sounded like *Pithoprakta*: 49 string players independently scrubbing away. But I ended up with something that sounded more like [Steve Reich](https://youtu.be/1oOmUi4HGt0?feature=shared). Note that I randomized the duration as well as the pitch of the notes:

```{r}
set.seed(3453)

# ===============================================
# two octaves of C minor
# ===============================================

pitches <- c("C", "D", "E-", "F", "G", "A-", "B-")
octaves <- 4:5
my_notes <- paste(rep(pitches, length(octaves)), 
                  sort(rep(octaves, length(pitches))), sep = "")

# ===============================================
# initialize music
# ===============================================

reich <- Music() + 
  Meter(4, 4) + 
  Tempo(120)

# ===============================================
# add 50 random lines
# ===============================================

for(i in 1:50){
  reich <- reich + 
    Line(pitches = sample(my_notes, 4 * 5, replace = TRUE),
         durations = sample(c(2, 1, 0.5, 0.25), 4 * 5, replace = TRUE)) + 
    Instrument(46)
}

show(reich, to = "audio")
```


# Your turn

Your task here is simply to **play**. Play, and surprise yourself. Set up a simulation, and use the output to randomly determine the elements of a piece of music: the melody, harmony, rhythm, meter, pitch, articulation, instrumentation, etc. The sky is truly the limit. The goal is to generate music that contains surprising emergent properties that you would not have anticipated based on the rules of the system you designed. If you can also make yourself laugh by how absurd these things sound, even better.

To complete this lab, please upload the following **to Canvas** (not Gradescope):

- an `R` script (*not* Quarto!) with the source code that generates your music. **Don't forget to set a seed**!
- the `.mp3` file with the audio of your piece;
- a paragraph or two describing the thought process behind the simulation you set up. Discuss how the rules of your random process translated to the sound of the music that was generated. Note anything that surprised you. 
